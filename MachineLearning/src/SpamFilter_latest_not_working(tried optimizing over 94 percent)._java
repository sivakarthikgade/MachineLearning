package org.siva.machinelearning;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**document encoding
 * white space meaning
 * truecasing
 * language ?
 * @author sivakarthik
 *
 */

enum Class {
	SPAM,
	HAM
}

enum Classifier {
	NAIVE_BAYES,
	LOGISTIC_REGRESSION
}

public class SpamFilter {
	
	private String trainingFolder = null;
	private String testFolder = null;
	private Classifier classifier = null;
	private String stopWordsFilePath = null;
	private Set<String> vocabulary = new HashSet<String>();
	private Set<String> stopWords = new HashSet<String>();
	private Map<Class, Integer> docCntPerClass = new HashMap<Class, Integer>();
	private Map<Class, Double> prior = new HashMap<Class, Double>();
	private Map<Class, Map<String, Integer>> tokenCounts = new HashMap<Class, Map<String, Integer>>();
	private Map<Class, Map<String, Double>> tokenCondProb = new HashMap<Class, Map<String, Double>>();
	private Map<Class, List<String>> classTokens = new HashMap<Class, List<String>>();
	private Map<Class, Set<String>> distClassTokens = new HashMap<Class, Set<String>>();
	private String regex = "[^a-z\'\\:\\/\\@\\+]";
	
	public SpamFilter() {
		System.out.println("In the constructor of SpamFilter");
	}
	
	public SpamFilter(String trainingFolder, String testFolder, Classifier classifier, String stopWordsFilePath) {
		this.trainingFolder = trainingFolder;
		this.testFolder = testFolder;
		this.classifier = classifier;
		this.stopWordsFilePath = stopWordsFilePath;
	}
	
	public Map<Class, Set<String>> getDistClassTokens() {
		return distClassTokens;
	}

	public void setDistClassTokens(Map<Class, Set<String>> distClassTokens) {
		this.distClassTokens = distClassTokens;
	}

	public String getRegex() {
		return regex;
	}

	public void setRegex(String regex) {
		this.regex = regex;
	}

	public Set<String> getStopWords() {
		return stopWords;
	}

	public void setStopWords(Set<String> stopWords) {
		this.stopWords = stopWords;
	}

	public String getStopWordsFilePath() {
		return stopWordsFilePath;
	}

	public void setStopWordsFilePath(String stopWordsFilePath) {
		this.stopWordsFilePath = stopWordsFilePath;
	}

	public Map<Class, List<String>> getClassTokens() {
		return classTokens;
	}

	public void setClassTokens(Map<Class, List<String>> classTokens) {
		this.classTokens = classTokens;
	}

	public Map<Class, Double> getPrior() {
		return prior;
	}

	public void setPrior(Map<Class, Double> prior) {
		this.prior = prior;
	}

	public Map<Class, Integer> getDocCntPerClassifier() {
		return docCntPerClass;
	}

	public void setDocCntPerClassifier(Map<Class, Integer> docCntPerClassifier) {
		this.docCntPerClass = docCntPerClassifier;
	}

	public Set<String> getVocabulary() {
		return vocabulary;
	}

	public void setVocabulary(Set<String> vocabulary) {
		this.vocabulary = vocabulary;
	}

	public Map<Class, Map<String, Double>> getTokenCondProb() {
		return tokenCondProb;
	}

	public void setTokenCondProb(Map<Class, Map<String, Double>> tokenCondProb) {
		this.tokenCondProb = tokenCondProb;
	}

	public Map<Class, Map<String, Integer>> getTokenCounts() {
		return tokenCounts;
	}

	public void setTokenCounts(Map<Class, Map<String, Integer>> tokenCounts) {
		this.tokenCounts = tokenCounts;
	}

	public Classifier getClassifier() {
		return classifier;
	}

	public void setClassifier(Classifier classifier) {
		this.classifier = classifier;
	}

	public String getTrainingFolder() {
		return trainingFolder;
	}

	public void setTrainingFolder(String trainingFolder) {
		this.trainingFolder = trainingFolder;
	}

	public String getTestFolder() {
		return testFolder;
	}

	public void setTestFolder(String testFolder) {
		this.testFolder = testFolder;
	}
	
	
	public void loadStopWords() throws Exception {
		BufferedReader br = new BufferedReader(new FileReader(getStopWordsFilePath()));
		String str = null;
		while((str=br.readLine())!=null) {
			getStopWords().add(str.toLowerCase());
		}
		br.close();
		System.out.println("StopWord count: "+getStopWords().size());
	}
	
	public void trainMultiNomial() throws Exception {
		if(Classifier.NAIVE_BAYES == getClassifier()) {
			File folder = null;
			
			folder = new File(getTrainingFolder()+File.separator+Class.SPAM);
			getDocCntPerClassifier().put(Class.SPAM, folder.listFiles().length);
			
			folder = new File(getTrainingFolder()+File.separator+Class.HAM);
			getDocCntPerClassifier().put(Class.HAM, folder.listFiles().length);

			getPrior().put(Class.SPAM, (double)getDocCntPerClassifier().get(Class.SPAM)/(getDocCntPerClassifier().get(Class.SPAM) + getDocCntPerClassifier().get(Class.HAM)));
			getPrior().put(Class.HAM, (double)getDocCntPerClassifier().get(Class.HAM)/(getDocCntPerClassifier().get(Class.SPAM) + getDocCntPerClassifier().get(Class.HAM)));

			trainMultiNomialNB(null);
		} else if(Classifier.LOGISTIC_REGRESSION == getClassifier()) {
			trainMultiNomialLR();
		}
	}
	
	private void trainMultiNomialNB(Class currClass) throws Exception {
		
		if(currClass == null) {

			for(Class c: Class.values()) {
				getTokenCounts().put(c, new HashMap<String, Integer>());
				getTokenCondProb().put(c, new HashMap<String, Double>());
			}
			
			for(Class c: Class.values()) {
				trainMultiNomialNB(c);
			}
			
//			for(Class c: Class.values()) {
//				computeCondProbForClassNB(c);
//			}
			
			for(Class c: Class.values()) {
				int totalTokenCnt = getClassTokens().get(c).size() + getDistClassTokens().get(c).size();
				for(String word: getDistClassTokens().get(c)) {
					double d = 1+(double)(getTokenCounts().get(c).get(word)/totalTokenCnt);
					System.out.println("totalTokenCnt: "+totalTokenCnt);
					System.out.println("tokenCnt: "+getTokenCounts().get(c).get(word));
					System.out.println("tokenCondProb: "+d);
					getTokenCondProb().get(c).put(word, d);
				}
			}
			
			return;
		}
		
		String filePath = null;
		File folder = null;
		File[] listOfFiles = null;
		String fileText = null, str = null, token = null;
		BufferedReader br = null;
		Collection<String> tokens = null;
		Iterator<String> itr = null;
		
		folder = new File(getTrainingFolder()+File.separator+currClass.name());
		listOfFiles = folder.listFiles();
		getClassTokens().put(currClass, new ArrayList<String>());
		getDistClassTokens().put(currClass, new HashSet<String>());
		
		for(int i = 0; i < listOfFiles.length; i++) {
			if(listOfFiles[i].isFile()) {
				fileText = "";
				filePath = listOfFiles[i].getAbsolutePath();
				br = new BufferedReader(new FileReader(filePath));
				while((str = br.readLine()) != null) {
					fileText = fileText + " " + str;
				}
				br.close();
				fileText = fileText.toLowerCase();
				//fileText = fileText.replaceAll(getRegex(), " ");
				tokens = new ArrayList<String>(Arrays.asList(fileText.toLowerCase().split("[\\s]+")));

				itr = tokens.iterator();
				while(itr.hasNext()) {
					token = itr.next();
					if(getStopWords().contains(token)) {
						itr.remove();
						continue;
					}
					if(getTokenCounts().get(currClass).get(token) == null)
						getTokenCounts().get(currClass).put(token,2);
					else
						getTokenCounts().get(currClass).put(token,getTokenCounts().get(currClass).get(token)+1);
//					for(Class c: Class.values()) {
//						if(c == currClass)
//							continue;
//						if(getTokenCounts().get(c).get(token) == null)
//							getTokenCounts().get(c).put(token,1);
//					}
				}
				
				getClassTokens().get(currClass).addAll(tokens);
				getDistClassTokens().get(currClass).addAll(tokens);
				getVocabulary().addAll(tokens);
			}
		}
	}

//	private void computeCondProbForClassNB(Class c) throws Exception {
//
//		getTokenCounts().put(c, new HashMap<String, Integer>());
//		getTokenCondProb().put(c, new HashMap<String, Double>());
//		
//		List<String> tokensInClass = getClassTokens().get(c);
//		int tokenCnt = 0, totalTokenCnt = 0;
//		
//		for(String word: getVocabulary()) {
//			tokenCnt = 1;
//			for(String token: tokensInClass) {
//				if(word.equals(token))
//					tokenCnt++;
//			}
//			totalTokenCnt = totalTokenCnt + tokenCnt;
//			getTokenCounts().get(c).put(word, tokenCnt);
//		}
//		
//		System.out.println("totalTokensInClassCnt old way: "+totalTokenCnt+" ; Class: "+c.name());
//		System.out.println("totalTokensInClassCnt new way: "+(tokensInClass.size()+getVocabulary().size())+" ; Class: "+c.name());
//		
//		for(String word: getVocabulary()) {
//			getTokenCondProb().get(c).put(word, (double)getTokenCounts().get(c).get(word)/totalTokenCnt);
//		}
//	}
	
	private void trainMultiNomialLR() throws Exception {
		
	}

	
	public void testMultiNomial() throws Exception {
		if(Classifier.NAIVE_BAYES == getClassifier()) {
			int correctCnt = testMultiNomialNB(null);
			int totalTestDocCnt = 0;
			for(Class c: Class.values())
				totalTestDocCnt+=(new File(getTestFolder()+File.separator+c)).listFiles().length;
			System.out.println("Total correctly classified documents: "+correctCnt+"/"+totalTestDocCnt+". Accuracy: "+((double)correctCnt/totalTestDocCnt));
		} else if(Classifier.LOGISTIC_REGRESSION == getClassifier())
			testMultiNomialLR();
	}
	
	private int testMultiNomialNB(String folderPath) throws Exception {
		int correctCnt = 0, totalCnt = 0;
		Class expectedClass = null;
		
		if(folderPath == null || folderPath.length() == 0) {
			for(Class c: Class.values())
				correctCnt+=testMultiNomialNB(getTestFolder()+File.separator+c.name());
			return correctCnt;
		}
		
		if(folderPath.substring(folderPath.lastIndexOf(File.separator)+1).equalsIgnoreCase(Class.SPAM.name()))
			expectedClass = Class.SPAM;
		else if(folderPath.substring(folderPath.lastIndexOf(File.separator)+1).equalsIgnoreCase(Class.HAM.name()))
			expectedClass = Class.HAM;
		
		File folder = new File(folderPath);
		File[] listOfFiles = folder.listFiles();
		String filePath = null;
		String fileText = null, str = null;
		BufferedReader br = null;
		List<String> tokensInDoc = null;
		double probability = 0, maxProbability = 0;
		Class actualClass = null;
		List<String> tokens = null;
		Iterator<String> itr = null;
	
		for(int i = 0; i < listOfFiles.length; i++) {
			if(listOfFiles[i].isFile()) {
				fileText = "";
				filePath = listOfFiles[i].getAbsolutePath();
				br = new BufferedReader(new FileReader(filePath));
				while((str = br.readLine()) != null) {
					fileText = fileText + " " + str;
				}
				br.close();
				fileText = fileText.toLowerCase();
				//fileText = fileText.replaceAll(getRegex(), " ");
				tokensInDoc = new ArrayList<String>(Arrays.asList(fileText.toLowerCase().split("[\\s]+")));
				itr = tokensInDoc.iterator();
				while(itr.hasNext()) {
					str = itr.next();
					if(getStopWords().contains(str)) {
						itr.remove();
					}
				}
				
				actualClass = null;
				maxProbability = 0;
				for(Class c: Class.values()) {
					probability = Math.log10(getPrior().get(c))/Math.log10(2);
					for(String token: tokensInDoc) {
						probability = probability + (getTokenCondProb().get(c).get(token)==null ? 0 : (Math.log10(getTokenCondProb().get(c).get(token))/Math.log10(2)));
					}
					System.out.println("Doc: "+listOfFiles[i].getName()+"; ExpClass: "+expectedClass.name()+"; CurrentClass: "+c.name()+"; Prob: "+probability);
					if(actualClass == null || (probability > maxProbability)) {
						maxProbability = probability;
						actualClass = c;
					}
				}
				
				System.out.println("ActualClass: "+actualClass+"; ExpectedClass: "+expectedClass);
				if(actualClass == expectedClass)
					correctCnt++;
				totalCnt++;
			}
		}

		System.out.println("correct count in class "+ expectedClass.name() + ": "+correctCnt+"/"+totalCnt+". Accuracy: "+((double)correctCnt/totalCnt));
		return correctCnt;
	}

	private void testMultiNomialLR() throws Exception {
		
	}

	
	public void applyMultiNomial() throws Exception {
		if(Classifier.NAIVE_BAYES == getClassifier())
			applyMultiNomialNB();
		else if(Classifier.LOGISTIC_REGRESSION == getClassifier())
			applyMultiNomialLR();
	}
	
	private void applyMultiNomialNB() throws Exception {
		
	}

	private void applyMultiNomialLR() throws Exception {
		
	}


	public static void main(String[] args) throws Exception {
		double startTime = System.currentTimeMillis();
		String trainingFolder = "C:\\Users\\sivakarthik\\Desktop\\Higher Studies\\STUDY\\MachineLearning\\UTD_Course\\HomeworkAssignments\\HomeWork2\\train";
		String testFolder = "C:\\Users\\sivakarthik\\Desktop\\Higher Studies\\STUDY\\MachineLearning\\UTD_Course\\HomeworkAssignments\\HomeWork2\\test";
		String clsf = "nb";
		String stopWordsFilePath = "C:\\Users\\sivakarthik\\Desktop\\Higher Studies\\STUDY\\MachineLearning\\UTD_Course\\HomeworkAssignments\\HomeWork2\\stop_words.txt";
		Classifier classifier = null;
		
		if("nb".equalsIgnoreCase(clsf))
			classifier = Classifier.NAIVE_BAYES;
		else if("lr".equalsIgnoreCase(clsf))
			classifier = Classifier.LOGISTIC_REGRESSION;
		
		SpamFilter filter = new SpamFilter(trainingFolder, testFolder, classifier, stopWordsFilePath);
		filter.loadStopWords();
		filter.trainMultiNomial();
		filter.testMultiNomial();
		filter.logData();
		System.out.println("SpamFilter: Total execution time->"+((double)(System.currentTimeMillis()-startTime)/1000)+" secs.");
	}
	
	private void logData() throws Exception {
		BufferedWriter bw = new BufferedWriter(new FileWriter("spam_filter.txt"));

		bw.write("THE END!! Results Time:");
		bw.newLine();
		bw.write("Total Vocab Count: "+ getVocabulary().size());
		bw.newLine();
		bw.write("SPAM Prior: "+ getPrior().get(Class.SPAM));
		bw.newLine();
		bw.write("HAM Prior: "+ getPrior().get(Class.HAM));
		bw.newLine();
		bw.write("Total words in training spam set: "+getClassTokens().get(Class.SPAM).size());
		bw.newLine();
		bw.write("Total words in training ham set: "+getClassTokens().get(Class.HAM).size());
		bw.newLine();
		bw.write("Total distinct words in training spam set: "+getDistClassTokens().get(Class.SPAM).size());
		bw.newLine();
		bw.write("Total distinct words in training ham set: "+getDistClassTokens().get(Class.HAM).size());
		bw.newLine();
		bw.write("Total class tokens in spam set: "+getTokenCondProb().get(Class.SPAM).size());
		bw.newLine();
		bw.write("Total class tokens in ham set: "+getTokenCondProb().get(Class.HAM).size());
		bw.newLine();
		bw.write("Total class tokens in spam set 2: "+getTokenCounts().get(Class.SPAM).size());
		bw.newLine();
		bw.write("Total class tokens in ham set 2: "+getTokenCounts().get(Class.HAM).size());
		bw.newLine();
		int cnt = 0;
		Iterator<String> itr = getTokenCounts().get(Class.SPAM).keySet().iterator();
		while(itr.hasNext()) {
			cnt = cnt + getTokenCounts().get(Class.SPAM).get(itr.next());
		}
		bw.write("Total words in training spam set with laplace smoothing: "+cnt);
		bw.newLine();
		cnt = 0;
		itr = getTokenCounts().get(Class.HAM).keySet().iterator();
		while(itr.hasNext()) {
			cnt = cnt + getTokenCounts().get(Class.HAM).get(itr.next());
		}
		bw.write("Total words in training ham set with laplace smoothing: "+cnt);
		bw.newLine();
		
		
//		for(String word: getVocabulary()) {
//			bw.write(word);
//			bw.newLine();
//		}
		bw.flush();
		
		for(Class c: Class.values()) {
			bw.newLine();
			bw.write("Class "+c.name()+" stats:");
			bw.newLine();
			Map<String, Double> vCondProb = getTokenCondProb().get(c);
			for(String word: vCondProb.keySet()) {
				bw.write(word+":"+vCondProb.get(word));
				bw.newLine();
			}
		}
		bw.close();
	}

}
